package cn.hackedmc.alexander.module.impl.exploit.disabler;

import cn.hackedmc.alexander.component.impl.render.NotificationComponent;
import cn.hackedmc.alexander.module.impl.exploit.Disabler;
import cn.hackedmc.alexander.newevent.Listener;
import cn.hackedmc.alexander.newevent.annotations.EventLink;
import cn.hackedmc.alexander.newevent.impl.other.WorldChangeEvent;
import cn.hackedmc.alexander.newevent.impl.packet.PacketSendEvent;
import cn.hackedmc.alexander.value.Mode;
import com.viaversion.viarewind.protocol.protocol1_8to1_9.Protocol1_8To1_9;
import com.viaversion.viarewind.utils.PacketUtil;
import com.viaversion.viaversion.api.Via;
import com.viaversion.viaversion.api.protocol.packet.PacketWrapper;
import com.viaversion.viaversion.api.type.Type;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C08PacketPlayerBlockPlacement;
import net.minecraft.util.BlockPos;
import net.minecraft.viamcp.ViaMCP;

public class WatchdogDisabler extends Mode<Disabler> {
    public WatchdogDisabler(String name, Disabler parent) {
        super(name, parent);
    }

    @EventLink
    public final Listener<WorldChangeEvent> onWorld = event -> {
        if (ViaMCP.getInstance().getVersion() <= 47) {
            NotificationComponent.post("Disabler", "Most bypasses only work in Via Version.", 10000);
        }
    };

    @EventLink
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        final Packet<?> packet = event.getPacket();

        if (packet instanceof C08PacketPlayerBlockPlacement) {
            final C08PacketPlayerBlockPlacement wrapped = (C08PacketPlayerBlockPlacement) packet;

            if (wrapped.getPosition().equals(new BlockPos(-1, -1, -1)) && wrapped.getPlacedBlockDirection() == 255) {
                PacketWrapper packetWrapper = PacketWrapper.create(0x1D, null, Via.getManager().getConnectionManager().getConnections().iterator().next());
                packetWrapper.write(Type.VAR_INT, 1);
                PacketUtil.sendToServer(packetWrapper, Protocol1_8To1_9.class, true, true);
            }
        }
    };
}