package cn.hackedmc.alexander.module.impl.exploit;

import cn.hackedmc.alexander.api.Rise;
import cn.hackedmc.alexander.module.Module;
import cn.hackedmc.alexander.module.api.Category;
import cn.hackedmc.alexander.module.api.ModuleInfo;
import cn.hackedmc.alexander.newevent.Listener;
import cn.hackedmc.alexander.newevent.annotations.EventLink;
import cn.hackedmc.alexander.newevent.impl.input.KeyboardInputEvent;
import cn.hackedmc.alexander.newevent.impl.other.TickEvent;
import cn.hackedmc.alexander.newevent.impl.packet.PacketSendEvent;
import cn.hackedmc.alexander.util.interfaces.InstanceAccess;
import cn.hackedmc.alexander.util.packet.PacketUtil;
import cn.hackedmc.alexander.value.impl.BooleanValue;
import cn.hackedmc.alexander.value.impl.StringValue;
import net.minecraft.client.gui.GuiScreen;
import net.minecraft.client.gui.inventory.GuiChest;
import net.minecraft.client.gui.inventory.GuiInventory;
import net.minecraft.network.Packet;
import net.minecraft.network.play.client.C0DPacketCloseWindow;
import net.minecraft.network.play.client.C0EPacketClickWindow;
import org.lwjgl.input.Keyboard;

@Rise
@ModuleInfo(name = "module.combat.keepcontainer.name", description = "module.exploit.keepcontainer.description", category = Category.EXPLOIT)
public class KeepContainer extends Module {
    private final StringValue key = new StringValue("Key For Open", this, "Insert");
    private final BooleanValue hyt = new BooleanValue("HuaYuTing Shop", this, false);
    private int chestId = 0;
    private int openKey = Keyboard.KEY_INSERT;
    private GuiScreen chestGui;

    @Override
    protected void onEnable() {
        chestGui = null;
    }

    @Override
    protected void onDisable() {
        if (chestId != 0) PacketUtil.sendNoEvent(new C0DPacketCloseWindow());
        chestGui = null;
        chestId = 0;
    }

    @EventLink
    public final Listener<PacketSendEvent> onPacketSend = event -> {
        final Packet<?> packet = event.getPacket();

        if (packet instanceof C0DPacketCloseWindow) {
            event.setCancelled();
            InstanceAccess.mc.currentScreen = null;
            chestId = ((C0DPacketCloseWindow) packet).windowId;
        }
        if (packet instanceof C0EPacketClickWindow && hyt.getValue()) {
            final C0EPacketClickWindow wrapper = (C0EPacketClickWindow) packet;

            wrapper.setUsedButton(0);
            wrapper.setActionNumber((short) 4);
        }
    };

    @EventLink
    public final Listener<KeyboardInputEvent> onKey = event -> {
        final int key = event.getKeyCode();

        if (key == openKey && chestGui != null)
            InstanceAccess.mc.displayGuiScreen(chestGui);
    };

    @EventLink
    public final Listener<TickEvent> onTick = event -> {
        if ((openKey = Keyboard.getKeyIndex(key.getName().toUpperCase())) == 0) {
            if (key.getName().equalsIgnoreCase("ESC")) openKey = Keyboard.KEY_ESCAPE;
            else {
                openKey = Keyboard.KEY_INSERT;
                key.setValue("Insert");
            }
        }
        if (InstanceAccess.mc.currentScreen instanceof GuiChest) {
            chestGui = InstanceAccess.mc.currentScreen;
        } else if (!(InstanceAccess.mc.currentScreen == null || InstanceAccess.mc.currentScreen instanceof GuiInventory)) {
            chestGui = null;
        }
    };
}
